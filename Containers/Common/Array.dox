/*! \file
    \brief Zawiera doumentacje dla pliku Array.cpp.

Dokumentacja zamieszczona w innym pliku pomaga uniknąć chaosu w organizacji kodu.
*/

/*! \file Array.cpp
    \brief Zawiera implementacje szablonu klasy Containers::Array.

Implementacja każdej klasy w innym pliku pomaga uniknąć chaosu w organizacji kodu.
*/

/*! \class KuszkAPI::Containers::Array
    \brief Implementacja szablonu tablicy dla modułu kontenerów.
    \tparam tnData Typ obiektów przechowywanych przez organizacje.
    \note Elementy indeksowane są od 1. Indeks 0 wskazuje na ostatni element, a elementy ujemne oznaczają przesunięcie do tyłu względem ostatniego elementu.
    \warning Należy stosować tylko dla obiektów typów prostych i struktur.
    \todo Należy zaimplementować mechanizm wyjątków.

Kalasa stanowi implementacje szablonu dynamicznej tablicy danych.
*/
/*! \var KuszkAPI::Containers::Array::ptBegin
    \brief Wskaźnik na początek danych.

Przechowuje adres komórki pamięci w której znajduje się początek przechowywanych danych.
*/
/*! \var KuszkAPI::Containers::Array::uDataSize
    \brief Rozmiar pojedyńczego obiektu.

Przechowuje rozmiar pojedyńczego obiektu znajdującego się w pamięci.
*/
/*! \var KuszkAPI::Containers::Array::tAbstract
    \brief Abstrakcyjna instancja przechowywanego typu.
    \note Istnieje by ominąć mechanizm wyjątków.

Przechowuje pojedyńczy obiekt wybranego typu z wyzerowanymi wszystkimi polami.
*/
/*! \fn template<tnPrev> KuszkAPI::Containers::Array<tnData>::Array(const Array<tnPrev>& aArray)
    \brief Konstruktor konwertujący.
    \param [in] aArray Organizacja źródłowa.
    \tparam tnPrev Typ obiektów przechowywanych przez organizacje źródłową.
    \warning Mogą pojawić się problemy gdy wielkość jednego obiektu nie będzie wielokrotnością wielkości drugiego.

Dokonuje konwersji danych w taki sposób, że zmienia się ich organizacja w pamięci - zostaje nadany nowy rozmiar pojedyńczego obiektu, a co za tym idzie nowy obiekt jest postrzegany jako kilka obiektów lub kilka obiektów staje się nowym obiektem.
*/
/*! \fn KuszkAPI::Containers::Array::Array(const Array<tnData>&)
    \brief Konstruktor kopiujący.
    \param [in] aArray Organizacja źródłowa.

Kopiuje wybrany obiekt.
*/
/*! \fn KuszkAPI::Containers::Array::Array(const Vector<tnData>&)
    \brief Konstruktor konwertujący.
    \param [in] vVector Organizacja źródłowa.

Dokonuje konwersji organizacji Containers::Vector na Containers::Array w taki sposób, że zachowuje ilość danych, rodzaj i ich kolejność.
*/
/*! \fn KuszkAPI::Containers::Array::Array(const List<tnData>&)
    \brief Konstruktor konwertujący.
    \param [in] lList Organizacja źródłowa.

Dokonuje konwersji organizacji Containers::List na Containers::Array w taki sposób, że zachowuje ilość danych, rodzaj i ich kolejność.
*/
/*! \fn KuszkAPI::Containers::Array::Array(const tnData[], unsigned)
    \brief Konstruktor konwertujący.
    \param [in] ptData TabBoxlica źródłowa.
    \param [in] uCount Rozmiar tablicy źródłowej.

Dokonuje konwersji tablicy o określonym rozmiarze na Containers::Array w taki sposób, że zachowuje ilość danych, rodzaj i ich kolejność.
*/
/*! \fn KuszkAPI::Containers::Array::Array(void)
    \brief Domyślny konstruktor.

Przy inicjacji obiektu ustala wielkość pojedyńczego wpisu danych.
*/
/*! \fn KuszkAPI::Containers::Array::~Array(void)
    \brief Dekonstruktor.

Usuwa wszystkie obiekty i zwalnia zużyte zasoby.
*/
/*! \fn unsigned KuszkAPI::Containers::Array::Add(const tnData&, int, bool)
    \brief Dodaje wybrany element do organizacji.
    \param [in] tData Element do dodania.
    \param [in] iPos Numer elementu względem którego ma zostać dodany nowy element. Dostępne wartości:\n
                0 - wskazuje na ostatni element (domyślnie).\n
                wartość dodatnia - elementy numerowane są rosnąco zaczynając od 1.\n
                wartość ujemna - elementy numerowane są malejąco licząc od 0.
    \param [in] bMode Sposób w jaki ma być dodany nowy element. Dostępne wartości to:\n
                #ADD_AFTER - dodaje objekt za wybranym elementem (domyślnie).\n
                #ADD_BEFORE - dodaje obiekt przed wybranym elementem.
    \return Aktualna liczba elementów.

Kopiuje obiekt przekazywany w parametrze i dodaje go do organizacji.
*/
/*! \fn unsigned KuszkAPI::Containers::Array::Add(const tnData[], unsigned, int, bool)
    \brief Dodaje wybrane elementy do organizacji.
    \param [in] ptData TabBoxlica źródłowa elementów.
    \param [in] uCount Rozmiar tablicy źródłowej.
    \param [in] iPos Numer elementu względem którego ma zostać dodany nowy element. Dostępne wartości:\n
                0 - wskazuje na ostatni element (domyślnie).\n
                wartość dodatnia - elementy numerowane są rosnąco zaczynając od 1.\n
                wartość ujemna - elementy numerowane są malejąco licząc od 0.
    \param [in] bMode Sposób w jaki ma być dodany nowy element. Dostępne wartości to:\n
                #ADD_AFTER - dodaje objekt za wybranym elementem (domyślnie).\n
                #ADD_BEFORE - dodaje obiekt przed wybranym elementem.
    \return Aktualna liczba elementów.

Kopiuje obiekty zawarte w tablicy i dodaje je do organizacji.
*/
/*! \fn const tnData& KuszkAPI::Containers::Array::GetData(int) const
    \brief Zwraca stałą referencje do wybranego obiektu.
    \param [in] iNumer Indeks wybranego elementu. Dostępne wartości:\n
                0 - wskazuje na ostatni element (domyślnie).\n
                wartość dodatnia - elementy numerowane są rosnąco zaczynając od 1.\n
                wartość ujemna - elementy numerowane są malejąco licząc od 0.
    \return Stała referencja do wybranego obiektu.
    \warning W przypadku niepowodzenia zwraca stałą referencje do obiektu Containers::Array::tAbstract.

Sprawdza czy element o podanym indeksie istnieje i zwraca jego stałą referencje lub element abstrakcyjny.
*/
/*! \fn const tnData* KuszkAPI::Containers::Array::GetBegin(void) const
    \brief Zwraca adres pamięci w którym znajduje się początek organizacji.
    \return Adres początku organizacji lub NULL gdy kontener jest pusty.

Brak specjalnych operacji do opisu.
*/
/*! \fn const tnData* KuszkAPI::Containers::Array::GetEnd(void) const
    \brief Zwraca adres pamięci w którym znajduje się koniec organizacji.
    \return Adres końca organizacji lub NULL gdy kontener jest pusty.

Brak specjalnych operacji do opisu.
*/
/*! \fn tnData& KuszkAPI::Containers::Array::operator[](int)
    \brief Zwraca referencje do wybranego obiektu.
    \param [in] iNumer Indeks wybranego elementu. Dostępne wartości:\n
                0 - wskazuje na ostatni element (domyślnie).\n
                wartość dodatnia - elementy numerowane są rosnąco zaczynając od 1.\n
                wartość ujemna - elementy numerowane są malejąco licząc od 0.
    \return Referencja do wybranego obiektu.
    \warning W przypadku niepowodzenia zwraca referencje do obiektu KuszkAPI::Containers::Array::tAbstract.

Sprawdza czy element o podanym indeksie istnieje i zwraca jego referencje lub element abstrakcyjny.
*/
/*! \fn const tnData& KuszkAPI::Containers::Array::operator[](int) const
    \brief Zwraca stałą referencje do wybranego obiektu.
    \param [in] iNumer Indeks wybranego elementu. Dostępne wartości:\n
                0 - wskazuje na ostatni element (domyślnie).\n
                wartość dodatnia - elementy numerowane są rosnąco zaczynając od 1.\n
                wartość ujemna - elementy numerowane są malejąco licząc od 0.
    \return Stała referencja do wybranego obiektu.
    \warning W przypadku niepowodzenia zwraca stałą referencje do obiektu Containers::Array::tAbstract.

Sprawdza czy element o podanym indeksie istnieje i zwraca jego stałą referencje lub element abstrakcyjny.
*/
/*! \fn Array<tnData>& KuszkAPI::Containers::Array::operator<<(const tnData&)
    \brief Dodaje wybrany element do organizacji.
    \param [in] tData Element do dodania.
    \return Referencja do aktualnej organizacji.

Kopiuje obiekt przekazywany w parametrze i dodaje go do organizacji.
*/
/*! \fn Array<tnData>& KuszkAPI::Containers::Array::operator>>(tnData&)
    \brief Pobiera element i usuwa go z organizacji.
    \param [out] tData Bufor wyjściowy.
    \return Referencja do aktualnej organizacji.

Kopiuje odpowiedni obiekt do bufora i usuwa go z organizacji. Jeśli kontener pracuje w trybie #MODE_HEEP operacji poddany zostanie obiekt o największym indeksie, a jeśli w trybie #MODE_QUEUE - element o indeksie najmniejszym.
*/
/*! \fn Array<tnData> KuszkAPI::Containers::Array::operator+(const Array<tnData>&) const
    \brief Dodaje dwie organizacje do siebie.
    \param [in] aArray Druga organizacja.
    \return Nowa organizacja stanowiąca sumę.

Tworzy nową organizację z bierzącej i przekazanej w parametrze w taki sposób, że na początku znajdują się elementy bierzącej organizacji, a po nich następują elementy organizacji przekazanej w parametrze.
*/
/*! \fn Array<tnData>& KuszkAPI::Containers::Array::operator+=(const Array<tnData>&)
    \brief Dodaje wybraną organizacje do bierzącej.
    \param [in] aArray Wybrana organizacja.
    \return Referencja do aktualnej organizacji.

Kopiuje wszystkie elementy wybranej organizacji do bierzącej zachowując ich kolejność.
*/
/*! \fn Array<tnData>& KuszkAPI::Containers::Array::operator=(const Array<tnData>&)
    \brief Kopiuje wybraną organizacje tworząc bierzącą organizajce na jej podstawie.
    \param [in] aArray Wybrana organizacja.
    \return Referencja do aktualnej organizacji.

Czyści bierzącą organizacje i kopiuje wszystkie elementy wybranej organizacji do bierzącej zachowując ich kolejność.
*/
